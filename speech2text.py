import torch
import sounddevice as sd
from transformers import pipeline
from scipy.io.wavfile import write
import numpy as np
import time
import keyboard
import os


# -----------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Thonburian Whisper
# -----------------------------
MODEL_NAME = "biodatlab/whisper-th-small-combined"
lang = "th"
device = 0 if torch.cuda.is_available() else "cpu"

pipe = pipeline(
    task="automatic-speech-recognition",
    model=MODEL_NAME,
    chunk_length_s=30,
    device=device,
)

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î)
# -----------------------------
def record_audio_enter(filename="recorded.wav", samplerate=16000):
    input()
    print("üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å... ‡∏Å‡∏î Enter ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~")

    frames = []
    stream = sd.InputStream(samplerate=samplerate, channels=1)
    stream.start()

    try:
        while True:
            if keyboard.is_pressed('enter'):
                break
            data, _ = stream.read(1024)
            frames.append(data)
            time.sleep(0.01)

    except KeyboardInterrupt:
        print("\n‚õîÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î")
        stream.stop()
        stream.close()
        if os.path.exists(filename):
            os.remove(filename)
        return

    stream.stop()
    stream.close()

    if frames:
        audio_data = np.concatenate(frames, axis=0)
        write(filename, samplerate, audio_data)
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏•‡∏¢‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~")

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
# -----------------------------
def recognize_speech(audio_path="recorded.wav"):
    try:
        result = pipe(
            audio_path,
            generate_kwargs={"language": "<|th|>", "task": "transcribe"},
            batch_size=16
        )
        return result["text"]
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}")
        return None

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢
# -----------------------------
# def start_voice_loop():
#     print("üí¨ ‡πÄ‡∏°‡πÇ‡∏•‡∏ô‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡∏û‡∏π‡∏î‡∏ú‡πà‡∏≤‡∏ô VAC ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πâ‡∏≤~ ‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~ üé§üê±")

#     # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Virtual Audio Cable
#     device_index = get_audio_device()
#     if device_index is None:
#         print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Virtual Audio Cable ‡∏ô‡∏∞‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤")
#         return

#     while True:
#         try:
#             record_audio_enter()

#             # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
#             user_input = recognize_speech()
#             if not user_input:
#                 print("‚ùå ‡πÄ‡∏°‡πÇ‡∏•‡∏ô‡∏µ‡πà‡∏ü‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏•‡∏¢‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ô‡∏∞~")
#                 continue

#             if user_input.strip().lower() in ["exit", "quit", "e"]:
#                 print("üëã ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~")
#                 break

#             print(f"üë¶ Won: {user_input}")

#             # ‡πÉ‡∏ä‡πâ ChatGPT ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
#             reply = get_response(user_input)
#             print(f"üê± Melony: {reply}")

#             # ‡∏û‡∏π‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
#             speak(reply, device_index=device_index)

#         except KeyboardInterrupt:
#             print("\n‚õîÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î ‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß~")
#             if os.path.exists("recorded.wav"):
#                 os.remove("recorded.wav")
#             break


